%!PS-Adobe-3.0
%%Title: lab4.c
%%For: Cruz Solano
%%Creator: a2ps version 4.14
%%CreationDate: Fri Nov 12 15:42:58 2021
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 6
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(// lab4.c ) c n
(// Cruz M. Solano-Nieblas) N
(// 11.08.21) N
() p n
(//#define DEBUG) c n
(#define) K
( TEST) p n
() N
(#define) K
( TRUE 1) p n
(#define) K
( FALSE 0) p n
(#define) K
( SEGNUMS 4) p n
(#define) K
( COLONPOS 2) p n
(#define) K
( BUTTONS 8) p n
(#include) K
( <avr/io.h>) p n
(#include) K
( <util/delay.h>) p n
(#include) K
( <avr/interrupt.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( ") p
(hd44780.h) str
(") p n
() N
(//holds data to be sent to the segments. logic zero turns segment on) c n
(uint8_t segment_data[5] = {0xFF};) p n
() N
(//decimal to 7-segment LED display encodings, logic "0" turns on segment) c n
(uint8_t dec_to_7seg[15] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, ) p n
() S 8 T () S 16 T () S 24 T (   0x82, 0xF8, 0x80, 0x98, 0xFF, ) S
(//0, 1, 2, 3, 4, 5, 6, ) c n
(7, 8, 9, \(blank\)) N
() p 8 T () S 16 T () S 24 T (   0x07,0x04, 0x03 , 0x00}; ) S
(//\(colon blank\), \(colon on\),) c n
( \(colon blank w/ alarm\), \(colon on w/ alarm\)) N
() p n
(enum) k
( encoder_state{IDLE, STATE01, DETENT, STATE10};  ) p
(// four states for the enco) c n
(der. STATE01 and STATE10 are in between IDLE and DETENT states) N
() p n
(volatile) K
( uint8_t i; ) p
(//general-purpose counter variable) c n
(volatile) K
( uint8_t mode; ) p
(//user interface) c n
(uint8_t alarm_set = 0; ) p
(//flag to indicate when the alarm is set) c n
(volatile) K
( uint16_t currentTime = 1200, testTime = 1200, setTime = 0; ) p
(//current cl) c n
(ock time) N
(volatile) K
( uint8_t save_portA;) p n
(volatile) K
( uint8_t save_portB;) p n
() N
(volatile) K
( ) p
(int) k
(8_t setSeconds = 0, setMinutes = 0, setHours = 0;) p n
(volatile) K
( uint8_t seconds = 0, minutes = 0, hours = 12;) p n
() N
(//encoder variables) c n
(uint8_t encoder_data = 0xFF; ) p
(//data being read from the encoder pins) c n
() p n
(//encoder 1) c n
(volatile) K
( ) p
(enum) k
( encoder_state encoder1 = IDLE; ) p
(//init encoder1 state) c n
(volatile) K
( ) p
(int) k
(8_t encoder1_count = 0; ) p
(//counter to track the encoder1 state machin) c n
(e) N
(volatile) K
( ) p
(int) k
(8_t encoder1_direction = 0; ) p
(//tracks whether encoder 1 rotated clock) c n
(wise or counter-clockwise) N
(volatile) K
( uint8_t pinA1 = 1, pinB1 = 1;) p n
(volatile) K
( uint8_t oldPinA1 = 1, oldPinB1 = 1; ) p
(//hold pin values for encoder1) c n
() p n
(//encoder 2) c n
(volatile) K
( ) p
(enum) k
( encoder_state encoder2 = IDLE; ) p
(//init encoder2 state) c n
(volatile) K
( ) p
(int) k
(8_t encoder2_count = 0; ) p
(//counter to track the encoder2 state machin) c n
(e) N
(volatile) K
( ) p
(int) k
(8_t encoder2_direction = 0; ) p
(//tracks whether encoder 2 rotated clock) c n
(wise or counter-clockwise) N
(volatile) K
( uint8_t pinA2 = 1, pinB2 = 1;) p n
(volatile) K
( uint8_t oldPinA2 = 1, oldPinB2 = 1; ) p
(//hold pin values for encoder2) c n
() p n
(char) k
(     lcd_str[16];  ) p
(//holds string to send to lcd  ) c n
() p n
(//******************************************************************************) c n
(//) S 8 T () S 16 T () S 24 T () S 32 T (spi_init) N
(//                     Initializes spi operation ) S 56 T () S 64 T () S 72 T () S 80 T () N
(lab4.c) (Page 1/11) (Nov 12, 21 15:05) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//) c n
() p n
(void) k
( spi_init\() p
(void) k
(\){) p n
(  ) S
(/* Run this code before attempting to write to the LCD.*/) c n
(  DDRF  |= 0x08;  ) p
(//port F bit 3 is enabling for LCD) c n
(  PORTF &= 0xF7;  ) p
(//port F bit 3 is initially low) c n
() p n
(  DDRB |= \(1<<PB0 | 1<<PB1 | 1<<PB2\); ) S
(//output mode for SS, MOSI, SCLK) c n
(  SPCR |= \(1<<SPE | 1<<MSTR\); ) p
(//master mode, clk low on idle, leading edge sampl) c n
(e) N
(  SPSR |= 1<<SPI2X; ) p
(//choose double speed operation) c n
() p n
(}) S
(//spi_init) c n
() p n
(//******************************************************************************) c n
(//) S 8 T () S 16 T () S 24 T () S 32 T (spi_read) N
(//          Reads data from MISO pin connected to the encoders ) S 64 T () S 72 T () S 80 T () N
() S 0 T () N
(//) N
() p n
(uint8_t spi_read\() S
(void) k
(\){) p n
() N
() S 8 T (PORTE &= ~\(1<<PE6\); ) S
(// parallel load encoder pins) c n
() p 8 T (_delay_us\(100\); ) S
(//need a delay for buffer to change states and PORTA to ) c n
(read the buttons) N
() p 8 T (PORTE |= 1<<PE6; ) S
(// disable parallel load to enable serial shifting) c n
() p 8 T (_delay_us\(100\); ) S
(//need a delay for buffer to change states and PORTA to ) c n
(read the buttons) N
() p n
() S 8 T (SPDR = 0x00; ) S
(// dummy transmission to start receive) c n
() p 8 T () S
(while) K
( \(bit_is_clear\(SPSR, SPIF\)\){} ) p
(// spin until transmission is complet) c n
(e) N
() p n
() S 8 T () S
(return) K
( SPDR;) p n
() N
() N
(}) S
(//spi_read) c n
() p n
(//******************************************************************************) c n
(//) S 8 T () S 16 T () S 24 T () S 32 T (spi_write) N
(//          Writes data to MOSI pin connected to the bar graph ) S 64 T () S 72 T () S 80 T () N
() S 0 T () N
(//) N
() p n
(void) k
( spi_write\(uint8_t data\){) p n
() S 8 T () N
() S 8 T (SPDR = data;) N
() S 8 T () S
(while) K
( \(bit_is_clear\(SPSR, SPIF\)\){} ) p
(// spin until transmission is complet) c n
(e) N
() p 8 T (PORTD |= 1<<PD2;) N
() S 8 T (PORTD &= ~\(1<<PD2\);) N
() S 8 T () N
(}) S
(//spi_write) c n
() p n
(//******************************************************************************) c n
(//                            chk_buttons                                      ) N
(//Checks the state of the button number passed to it. It shifts in ones till   ) N
(//the button is pushed. Function returns a 1 only once per debounced button    ) N
(//push so a debounce and toggle function can be implemented at the same time.  ) N
(//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            ) N
(//Expects active low pushbuttons on PINA port.  Debounce time is determined by ) N
(//external loop delay times 12. ) N
(//) N
() p n
(uint8_t chk_buttons\(uint8_t button\) {) N
(static) K
( uint16_t states[8] = {0}; ) p
(// an array to store the states of all buttons ) c n
(on the button board) N
() p 8 T () S 16 T () S 24 T () S
(// states[0] corresponds to S1 on the board and states[7) c n
(] corresponds to S8) N
(lab4.c) (Page 2/11) (Nov 12, 21 15:05) title
border
grestore
(Printed by Cruz Solano) rhead
(lab4.c) (1/6) (Friday November 12, 2021) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(states[button] = \(states[button]<<1 | \(! bit_is_clear\(PINA, button\)\) | 0xE000\); ) p
() c n
(//first extract the bit that corresponds to the button) N
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S 72 T (      ) S
(//) c n
(then shift the state back to the 1's place) N
(if) K
( \(states[button] == 0xF000\) {) p
(return) K
( TRUE;}) p n
(return) K
( FALSE;) p n
() N
(}) S
(//chk_buttons) c n
() p n
(// interrupt generated at 512Hz) c n
(// 1 sec = \(32768\) / \(2^6 * 512\)) N
(ISR\(TIMER0_COMP_vect\){) p n
() S 8 T () S
(static) K
( uint16_t timer_count = 0;) p n
() S 8 T (timer_count++;) N
() S 8 T () S
(if) K
( \(\(timer_count % 256\) == 0\){) p n
() S 8 T () S 16 T (segment_data[COLONPOS] = alarm_set ? dec_to_7seg[13] : dec_to_7s) N
(eg[11];) N
() N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(\(timer_count % 512\) == 0\){) p n
() S 8 T () S 16 T (seconds++;) N
() S 8 T () S 16 T (segment_data[COLONPOS] = alarm_set ? dec_to_7seg[14] : dec_to_7s) N
(eg[12];) N
() N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(seconds > 59\){) p n
() S 8 T () S 16 T (minutes++;) N
() S 8 T () S 16 T (seconds = 0;) N
() S 8 T () N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(minutes > 59\){) p n
() S 8 T () S 16 T (hours++;) N
() S 8 T () S 16 T (minutes = 0;) N
() N
() S 8 T (}) S 16 T () N
() S 8 T () S
(if) K
( \(hours > 12\){) p n
() S 8 T () S 16 T (hours = 1;) N
() N
() S 8 T (}) N
() S 8 T (currentTime = 100*hours + minutes;) N
() S 8 T (testTime = 100*minutes + seconds;) N
() N
() S 8 T (save_portA = PORTA;) S 32 T () N
() S 8 T (save_portB = PORTB;) N
() N
() S 8 T () S
(//make PORTA an input port with pullups ) c n
() p 8 T (DDRA = 0x00; ) S
(//inputs) c n
() p 8 T (PORTA = 0xFF; ) S
(//pullups enabled) c n
() p n
() S 8 T () S
(//enable tristate buffer for pushbutton switches) c n
() p 8 T (PORTB |= 1<<PB4 | 1<<PB5 | 1<<PB6; ) S
(//decoder outputs logic low DEC7 to a) c n
(ctive low tri state buffer) N
() p n
() S 8 T (_delay_us\(0.1\); ) S
(//need a delay for buffer to change states and PORTA to ) c n
(read the buttons) N
() p 8 T () S
(//now check each button and increment the count as needed) c n
() p n
() S 8 T () S
(if) K
( \(chk_buttons\(0\)\){mode ^= 1;} ) p
(//toggle the bit on the bar graph that c) c n
(orresponds to the button) N
() p 8 T () S
(if) K
( \(chk_buttons\(1\)\){mode ^= 1<<1;} ) p
(//toggle the bit on the bar graph tha) c n
(t corresponds to the button) N
() p 8 T () S
(if) K
( \(chk_buttons\(6\)\){mode ^= 1<<6;} ) p
(//toggle the bit on the bar graph tha) c n
(t corresponds to the button) N
() p 8 T () S
(if) K
( \(chk_buttons\(7\)\){mode ^= 1<<7;} ) p
(//toggle the bit on the bar graph tha) c n
(t corresponds to the button) N
() p 8 T () N
() S 8 T () S
(//disable tristate buffer for pushbutton switches) c n
(//) S 8 T (PORTB &= ~\(1<<PB4\); //decoder outputs logic high and disables tri state ) N
(buffer) N
(lab4.c) (Page 3/11) (Nov 12, 21 15:05) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 8 T (encoder_data = spi_read\(\); ) S
(//read encoder pins from spi) c n
() p n
() S 8 T (pinA1 = \(\(encoder_data & 0x01\) == 0\) ? 0 : 1; ) S
(//sample pinA from encoder) c n
( 1) N
() p 8 T (pinB1 = \(\(encoder_data & 0x02\) == 0\) ? 0 : 1; ) S
(//sample pinB from encoder) c n
( 1) N
() p 8 T () S
(//encoder1 state machine) c n
() p 8 T () S
(switch) K
( \(encoder1\){) p n
() S 8 T () S 16 T () S
(case) K
( IDLE:) p n
() S 8 T () S 16 T (      ) S
(//check if encoder1 has gone through all states of the sta) c n
(te machine) N
() p 8 T () S 16 T (      ) S
(if) K
( \(encoder1_count == 3\){) p n
() S 8 T () S 16 T () S 24 T (      setHours += 1;) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(else) K
( ) p
(if) K
( \(encoder1_count == -3\){) p n
() S 8 T () S 16 T () S 24 T (      setHours -= 1; ) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      encoder1_count = 0;) N
() S 8 T () S 16 T (      ) S
(if) K
( \(\(pinA1 != oldPinA1\) || \(pinB1 != oldPinB1\)\){ ) p
(//if move) c n
(ment detected) N
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(\(pinA1 == 0\) && \(pinB1 == 1\)\){ ) p
(//CW movement) c n
() p 8 T () S 16 T () S 24 T () S 32 T (      ) S
(if) K
( \(oldPinA1 == 1\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (      encoder1 = STATE01;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (      encoder1_count++;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      }) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T () S 24 T (      ) S
(else) K
( ) p
(if) K
( \(\(pinA1 == 1\) && \(pinB1 == 0\)\){ ) p
(//CCW move) c n
(ment) N
() p 8 T () S 16 T () S 24 T () S 32 T (      ) S
(if) K
( \(oldPinB1 == 1\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (      encoder1 = STATE10;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (      encoder1_count--;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      }) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S
(case) K
( STATE01:) p n
() S 8 T () S 16 T (      ) S
(if) K
( \(\(pinA1 == 0\) && \(pinB1 == 0\)\){ ) p
(//CW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinB1 == 1\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder1 = DETENT;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder1_count++;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(else) K
( ) p
(if) K
( \(\(pinA1 == 1\) && \(pinB1 == 1\)\){ ) p
(//CCW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinA1 == 0\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder1 = IDLE;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S
(case) K
( DETENT:) p n
() S 8 T () S 16 T (      ) S
(if) K
( \(\(pinA1 == 1\) && \(pinB1 == 0\)\){ ) p
(//CW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinA1 == 0\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder1 = STATE10;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder1_count++;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(else) K
( ) p
(if) K
( \(\(pinA1 == 0\) && \(pinB1 == 1\)\){ ) p
(//CCW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinB1 == 0\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder1 = STATE01;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder1_count--;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S
(case) K
( STATE10:) p n
() S 8 T () S 16 T (      ) S
(if) K
( \(\(pinA1 == 1\) && \(pinB1 == 1\)\){ ) p
(//CW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinB1 == 0\){) p n
(lab4.c) (Page 4/11) (Nov 12, 21 15:05) title
border
grestore
(Printed by Cruz Solano) rhead
(lab4.c) (2/6) (Friday November 12, 2021) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T (      encoder1 = IDLE;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(else) K
( ) p
(if) K
( \(\(pinA1 == 0\) && \(pinB1 == 0\)\){ ) p
(//CCW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinA1 == 1\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder1 = DETENT;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder1_count--;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(break) K
(;) p n
() N
() S 8 T (}) S
(//end switch) c n
() p 8 T (oldPinA1 = pinA1;) N
() S 8 T (oldPinB1 = pinB1;) N
() S 8 T () N
() S 8 T (pinA2 = \(\(encoder_data & 0x04\) == 0\) ? 0 : 1; ) S
(//sample pinA from encoder) c n
( 2) N
() p 8 T (pinB2 = \(\(encoder_data & 0x08\) == 0\) ? 0 : 1; ) S
(//sample pinB from encoder) c n
( 2) N
() p 8 T () S
(//encoder 2 state machine) c n
(        ) p
(switch) K
( \(encoder2\){) p n
() S 8 T () S 16 T () S
(case) K
( IDLE:) p n
() S 8 T () S 16 T (      ) S
(//check if encoder2 has gone through all states of the sta) c n
(te machine) N
() p 8 T () S 16 T (      ) S
(if) K
( \(encoder2_count == 3\){) p n
() S 8 T () S 16 T () S 24 T (      setMinutes += 1;) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(else) K
( ) p
(if) K
( \(encoder2_count == -3\){) p n
() S 8 T () S 16 T () S 24 T (      setMinutes -= 1;) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      encoder2_count = 0;) N
() S 8 T () S 16 T (      ) S
(if) K
( \(\(pinA2 != oldPinA2\) || \(pinB2 != oldPinB2\)\){ ) p
(//if move) c n
(ment detected) N
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(\(pinA2 == 0\) && \(pinB2 == 1\)\){ ) p
(//CW movement) c n
() p 8 T () S 16 T () S 24 T () S 32 T (      ) S
(if) K
( \(oldPinA2 == 1\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (      encoder2 = STATE01;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (      encoder2_count++;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      }) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T () S 24 T (      ) S
(else) K
( ) p
(if) K
( \(\(pinA2 == 1\) && \(pinB2 == 0\)\){ ) p
(//CCW move) c n
(ment) N
() p 8 T () S 16 T () S 24 T () S 32 T (      ) S
(if) K
( \(oldPinB2 == 1\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (      encoder2 = STATE10;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (      encoder2_count--;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      }) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S
(case) K
( STATE01:) p n
() S 8 T () S 16 T (      ) S
(if) K
( \(\(pinA2 == 0\) && \(pinB2 == 0\)\){ ) p
(//CW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinB2 == 1\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder2 = DETENT;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder2_count++;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(else) K
( ) p
(if) K
( \(\(pinA2 == 1\) && \(pinB2 == 1\)\){ ) p
(//CCW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinA2 == 0\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder2 = IDLE;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S
(case) K
( DETENT:) p n
() S 8 T () S 16 T (      ) S
(if) K
( \(\(pinA2 == 1\) && \(pinB2 == 0\)\){ ) p
(//CW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinA2 == 0\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder2 = STATE10;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder2_count++;) N
() S 8 T () S 16 T () S 24 T (      }) N
(lab4.c) (Page 5/11) (Nov 12, 21 15:05) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(else) K
( ) p
(if) K
( \(\(pinA2 == 0\) && \(pinB2 == 1\)\){ ) p
(//CCW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinB2 == 0\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder2 = STATE01;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder2_count--;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S
(case) K
( STATE10:) p n
() S 8 T () S 16 T (      ) S
(if) K
( \(\(pinA2 == 1\) && \(pinB2 == 1\)\){ ) p
(//CW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinB2 == 0\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder2 = IDLE;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(else) K
( ) p
(if) K
( \(\(pinA2 == 0\) && \(pinB2 == 0\)\){ ) p
(//CCW movement) c n
() p 8 T () S 16 T () S 24 T (      ) S
(if) K
( \(oldPinA2 == 1\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder2 = DETENT;) N
() S 8 T () S 16 T () S 24 T () S 32 T (      encoder2_count--;) N
() S 8 T () S 16 T () S 24 T (      }) N
() S 8 T () S 16 T (      }) N
() S 8 T () S 16 T (      ) S
(break) K
(;) p n
() N
() S 8 T (}) S
(//end switch) c n
() p 8 T (oldPinA2 = pinA2;) N
() S 8 T (oldPinB2 = pinB2;) N
() N
() S 8 T () S
(if) K
( \(setMinutes > 59\){) p n
() S 8 T () S 16 T (setHours++;) N
() S 8 T () S 16 T (setMinutes -= 60;) N
() N
() S 8 T (}) N
() S 8 T () S
(else) K
( ) p
(if) K
( \(setMinutes < 0\){) p n
() S 8 T () S 16 T (setHours--;) N
() S 8 T () S 16 T (setMinutes = 59;) N
() N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(setHours > 12\){) p n
() S 8 T () S 16 T (setHours = 1;) N
() N
() S 8 T (}) N
() S 8 T () S
(else) K
( ) p
(if) K
( \(setHours < 1\){) p n
() S 8 T () S 16 T (setHours = 12;) S 32 T () N
() N
() S 8 T (}) N
() S 8 T (setTime = 100*setHours + setMinutes;) N
() N
() S 8 T (DDRA = 0xFF; ) S
(//make PORTA an output port) c n
() p n
() S 8 T () S
(//restore the states of PORTA and PORTB) c n
() p 8 T (PORTA = save_portA;) N
() S 8 T (PORTB = save_portB;) N
() N
(}) S
(//end ISR) c n
() p n
(//alarm pin interrupt) c n
(ISR\(TIMER1_COMPA_vect\)) p n
({) N
() S 8 T (PORTC ^= 1<<PC0;) N
() N
(}) S
(//end ISR) c n
() p n
(//ADC conversion complete interrupt) c n
(ISR\(ADC_vect\){) p n
() S 8 T () S
(//adc_result = ADC;) c n
() p 8 T (OCR2 = ADCH;) N
() N
(}) N
() N
(lab4.c) (Page 6/11) (Nov 12, 21 15:05) title
border
grestore
(Printed by Cruz Solano) rhead
(lab4.c) (3/6) (Friday November 12, 2021) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(//******************************************************************************) c n
(//                                   segment_sum                                ) N
(    ) N
(//takes a 16-bit binary input value and places the appropriate equivalent 4 digi) N
(t ) N
(//BCD segment code in the array segment_data for display.                       ) N
(//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|) N
(void) k
( segsum\(uint16_t sum\) {) p n
(  ) S
(//int i; //for loop variable) c n
(  ) p
(//determine how many digits there are ) c n
(  ) p
(int) k
( digits = 0; ) p
(//stores the number of digits in sum) c n
(  uint8_t digit = 0; ) p
(//stores a digit in sum) c n
(  uint16_t number = sum;) p n
(  ) S
(if) K
( \(number == 0\){digits = 1;}) p n
(  ) S
(else) K
({) p n
(  ) S
(while) K
( \(number != 0\) ) p
(//divide number out until you get zero) c n
(  {) p n
() S 8 T (number /= 10;) N
() S 8 T (digits++; ) S
(// increase digits count after every loop iteration) c n
() p n
(  } ) N
() N
(  }) N
() N
(  ) S
(//break up decimal sum into 4 digit-segments) c n
(  ) p
(for) K
( \(i = 0; i < digits+1; i++\)) p n
(  {) N
() S 8 T () S
(if) K
( \(i == COLONPOS\){i++;}) p n
() S 8 T (digit = sum % 10; ) S
(//extract least significant digit from the sum) c n
() p 8 T (segment_data[i] = dec_to_7seg[digit]; ) S
(//convert digit to BCD code and st) c n
(ore in segment_data array) N
() p 8 T (sum /= 10; ) S
(//remove last digit;) c n
() p n
(  }) S 8 T () N
() N
(  ) S
(//blank out leading zero digits ) c n
(  ) p
(if) K
( \(digits < SEGNUMS\) ) p
(//if there are less digits than segment numbers) c n
(  {) p n
() S 8 T () S
(for) K
( \(i = digits+1; i < SEGNUMS+1; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(i == COLONPOS\){i++;}) p n
() S 8 T () S 16 T (segment_data[i] = dec_to_7seg[10]; ) S
(//blank them out) c 72 T () N
() p 8 T () N
() S 8 T (}) N
() N
(  }) N
() N
(}) S
(//segment_sum) c n
() p n
(//******************************************************************************) c n
(*****) N
(//) S 8 T () S 16 T () S 24 T () S 32 T (refresh_display) N
(//takes a 16-bit input value and displays it in decimal form on the 7 segment di) N
(splay) N
(void) k
( refresh_display\(uint16_t display\){) p n
() S 8 T () S
(//break up the disp_value to 4, BCD digits in the array: call \(segsum\)) c n
() p 8 T (segsum\(display\);) N
() N
() S 8 T () S
(//bound a counter \(0-4\) to keep track of digit to display ) c n
() p 8 T (PORTB &= ~\(0x70\); ) S
(//first digit) c n
() p 8 T () S
(for) K
( \(i = 0; i < SEGNUMS+1; i++\)) p n
() S 8 T ({) N
() S 8 T (      PORTA = segment_data[i]; ) S
(//send 7 segment code to LED segments) c n
() p 8 T (      _delay_ms\(2\);) N
() N
() S 8 T (      ) S
(//send PORTB the next digit to display) c n
() p 8 T (      PORTB += 0x10;) N
() N
(lab4.c) (Page 7/11) (Nov 12, 21 15:05) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (}) N
() N
(}) S
(//refresh_display) c n
() p n
(//******************************************************************************) c n
(*****) N
(//) S 8 T () S 16 T () S 24 T () S 32 T (init_timers) N
(//initializes all the timers) N
(void) k
( init_timers\(\){) p n
() S 8 T () S
(//timer counter 0 setup) c n
() p 8 T (ASSR |= 1<<AS0; ) S
(//select 32KHz clock) c n
() p 8 T (TIMSK |= 1<<OCIE0; ) S
(//generate interrupt on compare match) c n
() p 8 T (OCR0 = 63; ) S
(//compare value) c n
() p 8 T (segment_data[COLONPOS] = dec_to_7seg[12];) N
() S 8 T (TCCR0 |= \(1<<WGM01 | 1<<CS00\);  ) S
(//no prescaling, ctc mode) c n
() p n
() S 8 T () S
(//timer counter 1 setup) c n
() p 8 T (DDRC |= 1; ) S
(//PCO will be used as the alarm pin) c n
() p 8 T (TCCR1A = 0x00; ) S
(//normal mode) c n
() p 8 T (TIMSK |= 1<<OCIE1A; ) S
(//enable output compare match interrupt) c n
() p 8 T (OCR1A = 18517; ) S
(//compare value) c n
() p 8 T (TCCR1B |= \(1<<WGM12\); ) S
(//ctc mode, don't enable clock yet) c n
() p n
() S 8 T () S
(//timer counter 2 setup) c n
() p 8 T (DDRB |= 1<<PB7; ) S
(//PB7 will used to drive the segment display and bar gra) c n
(ph) N
() p 8 T (OCR2 = 0xFE;) N
() S 8 T (TCCR2 |= \(1<<WGM21 | 1<<WGM20 | 1<<COM21 | 1<<CS20\); ) S
(//fast pwm mode) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(//clear on compare watch, no pre) c n
(scaler) N
() p 8 T () S
(//comare value will be updated by the ADC conversion complete ISR) c n
() p n
() S 8 T () S
(//timer counter 3 setup) c n
() p 8 T (DDRE |= 1<<PE3; ) S
(//PE3 will be used as a pwm output pin) c n
() p 8 T (TCCR3A |= \(1<<COM3A1 | 1<<WGM31\); ) S
(//clear PE3 on compare match, Fast-PWM) c n
() p 8 T (ICR3 = 0x000A; ) S
(//top) c n
() p 8 T (OCR3A = 0x0000; ) S
(//0% duty cycle) c n
() p 8 T (TCCR3B |= \(1<<WGM33 | 1<<WGM32 | 1<<CS30\); ) S
(//using ICR3 to define top, n) c n
(o prescaling) N
() p n
() N
(}) S
(//init_timers) c n
() p n
(//******************************************************************************) c n
(******) N
(//) S 8 T () S 16 T () S 24 T () S 32 T (alarm_on) N
(//turns on the alarm) N
(void) k
( alarm_on\(\){) p n
() S 8 T (TCCR1B |= 1<<CS10;) S 32 T () N
() S 8 T (OCR3A = 0x0005;) N
() N
(}) S
(//alarm_on) c n
() p n
(//******************************************************************************) c n
(******) N
(//) S 8 T () S 16 T () S 24 T () S 32 T (alarm_off) N
(//turns off the alarm) N
(void) k
( alarm_off\(\){) p n
() S 8 T (TCCR1B &= ~\(1<<CS10\);) S 32 T () N
() S 8 T (OCR3A = 0x0000;) N
() N
(}) S
(//alarm_off) c n
() p n
(//******************************************************************************) c n
(********') N
(//) S 8 T () S 16 T () S 24 T () S 32 T (init_adc) N
(//Initialize ADC) N
(void) k
( init_adc\(\){) p n
() S 8 T () S
(//Initalize ADC and its ports) c n
(lab4.c) (Page 8/11) (Nov 12, 21 15:05) title
border
grestore
(Printed by Cruz Solano) rhead
(lab4.c) (4/6) (Friday November 12, 2021) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (DDRF  &= ~\(_BV\(DDF7\)\); ) S
(//make port F bit 7 the ADC input  ) c n
() p 8 T (PORTF &= ~\(_BV\(PF7\)\);  ) S
(//port F bit 7 pullups must be off) c n
() p n
() S 8 T (ADMUX = 0x07 | 1<<REFS0 | 1<<ADLAR;                 ) S
(//single-ended input) c n
(, PORTF bit 7, left adjusted, 10 bits) N
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T ( ) S
(//reference is AVCC) c n
() p n
() S 8 T (ADCSRA = 1<<ADEN | 1<<ADIE | 0x07;                 ) S
(//ADC enabled, don't ) c n
(start yet, single shot mode ) N
() p n
() N
() N
(}) N
() N
() N
(//******************************************************************************) c n
(*****) N
(uint8_t main\(\)) p n
({) N
(uint16_t alarmTime = 0; ) S
(//alarm time set) c n
() p n
(//set port A as outputs) c n
(DDRA = 0xFF; ) p n
() N
(//set port B bits 4-6 as outputs) c n
(DDRB |= \(1<<PB4 | 1<<PB5 | 1<<PB6\);) p n
(PORTB &= ~\(0x70\); ) S
(//init Port B) c n
() p n
(//bar graph and encoder init) c n
(DDRE |= 1<<PE6;) p n
(PORTE |= 1<<PE6;) N
(spi_init\(\);) N
(DDRD |= 1<<PD2;) N
() N
(//init lcd) c n
(lcd_init\(\);) p n
(clear_display\(\);) N
() N
(//init timers) c n
(init_timers\(\);) p n
() N
(//init ADC) c n
(init_adc\(\);) p n
() N
(sei\(\); ) S
(//enable global interrupt flag) c n
() p n
(while) K
(\(1\){) p n
(  ADCSRA |= 1<<ADSC; ) S
(//poke the ADSC bit and start conversion) c n
() p n
(  spi_write\(mode\); ) S
(//show what mode the user is in) c n
(  ) p
(switch) K
( \(mode\){) p n
(  ) S 8 T () S
(case) K
( 0x01: ) p
(//set current real-time clock) c n
() p 8 T () S 16 T (setHours = hours;) N
() S 8 T () S 16 T (setMinutes = minutes;) N
() S 8 T () S 16 T (setTime = 100*setHours + setMinutes;) N
() S 8 T () S 16 T () S
(while) K
( \(mode & 0x01\){ ) p
(//set time using the encoders) c n
() p 8 T () S 16 T () S 24 T (refresh_display\(setTime\);) N
() S 8 T () S 16 T () S 24 T (mode &= ~\(0xFE\);) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (hours = setHours;) N
() S 8 T () S 16 T (minutes = setMinutes;) N
() S 8 T () S 16 T (currentTime = 100*hours + minutes;) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() N
() S 8 T () S
(case) K
( 0x02: ) p
(//set alarm clock) c n
() p 8 T () S 16 T (setHours = hours;) N
() S 8 T () S 16 T (setMinutes = minutes;) N
() S 8 T () S 16 T (setTime = 100*setHours + setMinutes;) N
() S 8 T () S 16 T () S
(while) K
( \(mode & 0x02\){ ) p
(//set time using the encoders) c n
(lab4.c) (Page 9/11) (Nov 12, 21 15:05) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T (refresh_display\(setTime\);) N
() S 8 T () S 16 T () S 24 T (mode &= ~\(0xFD\);) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (alarmTime = setTime;) N
() S 8 T () S 16 T (alarm_set = 1;) N
() S 8 T () S 16 T (strcpy\(lcd_str, ") S
(ALARM SET) str
("\);) p n
() S 8 T () S 16 T (string2lcd\(lcd_str\);) N
() S 8 T () S 16 T (segment_data[COLONPOS] = dec_to_7seg[13];) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() N
() S 8 T () S
(case) K
( \(1<<6\): ) p
(//disarm alarm) c n
() p 8 T () S 16 T (alarm_off\(\);) N
() S 8 T () S 16 T (alarm_set = 0;) N
() S 8 T () S 16 T (clear_display\(\);) N
() S 8 T () S 16 T (mode &= ~\(1<<6\);) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() N
() S 8 T () S
(case) K
( \(1<<7\): ) p
(//snooze alarm) c n
() p 8 T () S 16 T () S
(if) K
( \(alarm_set\){) p n
() S 8 T () S 16 T () S 24 T (#ifdef TEST) N
() S 8 T () S 16 T () S 24 T () S 32 T (setMinutes = minutes;) N
() S 8 T () S 16 T () S 24 T () S 32 T (setSeconds = seconds + 10;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(setSeconds > 59\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (setMinutes++;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (setSeconds -= 60;) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(setMinutes > 59\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (setMinutes = 0;) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (alarmTime = 100*setMinutes + setSeconds;) N
() S 8 T () S 16 T () S 24 T (#else) N
() S 8 T () S 16 T () S 24 T () S 32 T (setHours = hours;) N
() S 8 T () S 16 T () S 24 T () S 32 T (setMinutes = minutes + 10;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(setMinutes > 59\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (setHours++;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (setMinutes -= 60;) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(setHours > 12\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (setHours = 1;) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (alarmTime = 100*setHours + setMinutes;) N
() S 8 T () S 16 T () S 24 T (#endif) N
() N
() S 8 T () S 16 T () S 24 T (alarm_off\(\);) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (mode &= ~\(1<<7\);) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() S 8 T () N
() S 8 T () S
(default) K
(: ) p
(//display current time) c n
() p 8 T () S 16 T (refresh_display\(currentTime\);) N
() S 8 T () S 16 T (#ifdef TEST) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(alarm_set & \(currentTime == alarmTime\)\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (alarm_on\(\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(alarm_set & \(testTime == alarmTime\)\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (alarm_on\(\);) N
() S 8 T () S 16 T () S 24 T (}) N
() N
() S 8 T () S 16 T (#else) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(alarm_set & \(currentTime == alarmTime\)\){) p n
() S 8 T () S 16 T () S 24 T () S 32 T (alarm_on\(\);) N
() S 8 T () S 16 T () S 24 T (}) N
() N
() S 8 T () S 16 T (#endif) N
() N
(lab4.c) (Page 10/11) (Nov 12, 21 15:05) title
border
grestore
(Printed by Cruz Solano) rhead
(lab4.c) (5/6) (Friday November 12, 2021) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  }) N
() N
() N
(  }) S
(//while) c n
(}) p
(//main) c n
(lab4.c) (Page 11/11) (Nov 12, 21 15:05) title
border
grestore
(Printed by Cruz Solano) rhead
(lab4.c) (6/6) (Friday November 12, 2021) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
